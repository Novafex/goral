// Code generated by MockGen. DO NOT EDIT.
// Source: generate/goral/services (interfaces: IAdvisor)

// Package goral is a generated GoMock package.
package goral

import (
	goral "generate/goral/structures"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAdvisor is a mock of IAdvisor interface.
type MockIAdvisor struct {
	ctrl     *gomock.Controller
	recorder *MockIAdvisorMockRecorder
}

// MockIAdvisorMockRecorder is the mock recorder for MockIAdvisor.
type MockIAdvisorMockRecorder struct {
	mock *MockIAdvisor
}

// NewMockIAdvisor creates a new mock instance.
func NewMockIAdvisor(ctrl *gomock.Controller) *MockIAdvisor {
	mock := &MockIAdvisor{ctrl: ctrl}
	mock.recorder = &MockIAdvisorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAdvisor) EXPECT() *MockIAdvisorMockRecorder {
	return m.recorder
}

// CreateAdvisor mocks base method.
func (m *MockIAdvisor) CreateAdvisor(arg0 goral.Advisor) (goral.Advisor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdvisor", arg0)
	ret0, _ := ret[0].(goral.Advisor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdvisor indicates an expected call of CreateAdvisor.
func (mr *MockIAdvisorMockRecorder) CreateAdvisor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdvisor", reflect.TypeOf((*MockIAdvisor)(nil).CreateAdvisor), arg0)
}

// DeleteAdvisor mocks base method.
func (m *MockIAdvisor) DeleteAdvisor(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdvisor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdvisor indicates an expected call of DeleteAdvisor.
func (mr *MockIAdvisorMockRecorder) DeleteAdvisor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdvisor", reflect.TypeOf((*MockIAdvisor)(nil).DeleteAdvisor), arg0)
}

// GetAdvisor mocks base method.
func (m *MockIAdvisor) GetAdvisor(arg0 goral.Advisor) ([]goral.Advisor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvisor", arg0)
	ret0, _ := ret[0].([]goral.Advisor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvisor indicates an expected call of GetAdvisor.
func (mr *MockIAdvisorMockRecorder) GetAdvisor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvisor", reflect.TypeOf((*MockIAdvisor)(nil).GetAdvisor), arg0)
}

// InfiniteAdvisor mocks base method.
func (m *MockIAdvisor) InfiniteAdvisor(arg0 goral.Advisor) ([]goral.Advisor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfiniteAdvisor", arg0)
	ret0, _ := ret[0].([]goral.Advisor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfiniteAdvisor indicates an expected call of InfiniteAdvisor.
func (mr *MockIAdvisorMockRecorder) InfiniteAdvisor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfiniteAdvisor", reflect.TypeOf((*MockIAdvisor)(nil).InfiniteAdvisor), arg0)
}

// PaginateAdvisor mocks base method.
func (m *MockIAdvisor) PaginateAdvisor(arg0 goral.Advisor) ([]goral.Advisor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginateAdvisor", arg0)
	ret0, _ := ret[0].([]goral.Advisor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaginateAdvisor indicates an expected call of PaginateAdvisor.
func (mr *MockIAdvisorMockRecorder) PaginateAdvisor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginateAdvisor", reflect.TypeOf((*MockIAdvisor)(nil).PaginateAdvisor), arg0)
}

// UpdateAdvisor mocks base method.
func (m *MockIAdvisor) UpdateAdvisor(arg0 int, arg1 goral.Advisor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdvisor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdvisor indicates an expected call of UpdateAdvisor.
func (mr *MockIAdvisorMockRecorder) UpdateAdvisor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdvisor", reflect.TypeOf((*MockIAdvisor)(nil).UpdateAdvisor), arg0, arg1)
}
