// Code generated by MockGen. DO NOT EDIT.
// Source: generate/goral/services (interfaces: ICustomer)

// Package goral is a generated GoMock package.
package goral

import (
	goral "generate/goral/structures"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICustomer is a mock of ICustomer interface.
type MockICustomer struct {
	ctrl     *gomock.Controller
	recorder *MockICustomerMockRecorder
}

// MockICustomerMockRecorder is the mock recorder for MockICustomer.
type MockICustomerMockRecorder struct {
	mock *MockICustomer
}

// NewMockICustomer creates a new mock instance.
func NewMockICustomer(ctrl *gomock.Controller) *MockICustomer {
	mock := &MockICustomer{ctrl: ctrl}
	mock.recorder = &MockICustomerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICustomer) EXPECT() *MockICustomerMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockICustomer) CreateCustomer(arg0 goral.Customer) (goral.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0)
	ret0, _ := ret[0].(goral.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockICustomerMockRecorder) CreateCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockICustomer)(nil).CreateCustomer), arg0)
}

// DeleteCustomer mocks base method.
func (m *MockICustomer) DeleteCustomer(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockICustomerMockRecorder) DeleteCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockICustomer)(nil).DeleteCustomer), arg0)
}

// GetCustomer mocks base method.
func (m *MockICustomer) GetCustomer(arg0 goral.Customer) ([]goral.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", arg0)
	ret0, _ := ret[0].([]goral.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockICustomerMockRecorder) GetCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockICustomer)(nil).GetCustomer), arg0)
}

// InfiniteCustomer mocks base method.
func (m *MockICustomer) InfiniteCustomer(arg0 goral.Customer) ([]goral.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InfiniteCustomer", arg0)
	ret0, _ := ret[0].([]goral.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfiniteCustomer indicates an expected call of InfiniteCustomer.
func (mr *MockICustomerMockRecorder) InfiniteCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfiniteCustomer", reflect.TypeOf((*MockICustomer)(nil).InfiniteCustomer), arg0)
}

// PaginateCustomer mocks base method.
func (m *MockICustomer) PaginateCustomer(arg0 goral.Customer) ([]goral.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginateCustomer", arg0)
	ret0, _ := ret[0].([]goral.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaginateCustomer indicates an expected call of PaginateCustomer.
func (mr *MockICustomerMockRecorder) PaginateCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginateCustomer", reflect.TypeOf((*MockICustomer)(nil).PaginateCustomer), arg0)
}

// UpdateCustomer mocks base method.
func (m *MockICustomer) UpdateCustomer(arg0 int, arg1 goral.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockICustomerMockRecorder) UpdateCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockICustomer)(nil).UpdateCustomer), arg0, arg1)
}
